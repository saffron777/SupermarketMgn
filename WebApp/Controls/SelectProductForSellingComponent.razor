@inject UseCases.IViewCategoriesUseCase ViewCategoriesUseCase
@inject UseCases.IViewProductsByCategoryId ViewProductsByCategoryId

<div class="form-group">
	<label for="category">Category</label>
	<select class="form-select" id="category" @bind="SelectCategoryId">
		<option selected></option>
		@foreach (var item in categories)
		{
			<option value="@item.CategoryId">@item.Name</option>
		}
	</select>
</div>

@if (productsInCategory != null)
{
	<table class="table">
		<thead>
			<tr>
				<th>Prod Name</th>
				<th>Qty Left</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var prod in productsInCategory)
			{
				<tr @onclick="@(()=> OnSelectProduct(prod))"
			style="@(prod.ProductId == selectedProductId? "background-color:beige;cursor:pointer;":"cursor:pointer;")">
					<td>@prod.Name</td>
					<td>@prod.Quantity</td>
				</tr>
			}
		</tbody>
	</table>
}


@code {

	[Parameter]
	public EventCallback<Product> OnProductSelected { get; set; }

	private int selectedProductId;
	private IEnumerable<Product> productsInCategory;

	private int selectCategoryId;
	private int SelectCategoryId
	{
		get
		{
			return selectCategoryId;
		}
		set
		{
			selectCategoryId = value;
			productsInCategory = ViewProductsByCategoryId.Execute(value);
			OnSelectProduct(null);
			StateHasChanged();
		}
	}

	private IEnumerable<Category> categories;


	protected override void OnInitialized()
	{
		base.OnInitialized();
		categories = ViewCategoriesUseCase.Execute();
	}

	private void OnSelectProduct(Product product)
	{
		OnProductSelected.InvokeAsync(product);

		if (product != null) selectedProductId = product.ProductId;

	}
}
