@page "/addProduct"
@attribute [Authorize(Policy = "AdminOnly")]
@inject NavigationManager navigationManager
@inject UseCases.IAddProductUseCase AddProductUseCase
@inject UseCases.IViewCategoriesUseCase ViewCategoriesUseCase

<h3>Add Product</h3>


@if(Product!=null)
{
	<EditForm Model="Product" class="form-inline" OnValidSubmit="OnValidSumit">
		<DataAnnotationsValidator></DataAnnotationsValidator>
		<ValidationSummary></ValidationSummary>
		<div class="form-group">
			<label for="name">Name</label>
			<InputText id="name" @bind-Value="Product.Name" class="form-control"></InputText>
		</div>
		<div class="form-group">
			<label for="category">Category</label>
			<select class="form-select" id="category" @bind="Product.CategoryId">
				<option selected></option>
				@foreach (var item in categories)
				{
					<option value="@item.CategoryId">@item.Name</option>
				}
			</select>
		</div>
		<div class="form-group">
			<label for="price">Price</label>
			<InputNumber id="price" @bind-Value="Product.Price" @bind-Value:format="F2" class="form-control"></InputNumber>
		</div>
		<div class="form-group">
			<label for="quantity">Quantity</label>
			<InputNumber id="quantity" @bind-Value="Product.Quantity" class="form-control"></InputNumber>
		</div>
		<br />
		<button type="submit" class="btn btn-primary" >Save</button>
		<button type="button" class="btn btn-primary" @onclick="OnCancel" >Cancel</button>
	</EditForm>
}


@code {
	private Product Product;
	private IEnumerable<Category> categories;

	protected override void OnInitialized()
	{
		base.OnInitialized();

		Product = new Product();
		categories = ViewCategoriesUseCase.Execute();
	}

	private void OnValidSumit()
	{
		AddProductUseCase.Execute(Product);
		navigationManager.NavigateTo("/products");

	}

	private void OnCancel()
	{
		navigationManager.NavigateTo("/products");
	}
}
