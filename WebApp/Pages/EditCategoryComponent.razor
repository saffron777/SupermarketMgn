@page "/editCategory/{categoryId}"
@attribute [Authorize(Policy = "AdminOnly")]

@inject NavigationManager navigationManager
@inject UseCases.IAddCategoryUseCase AddCategoryUseCase
@inject UseCases.IGetCategoryByIdUseCase GetCategoryByIdUseCase
@inject UseCases.IEditCategoryUseCase EditCategoryUseCase

<h3>Edit Category</h3>

@if (category != null)
{
	<EditForm Model="category" class="form-inline" OnValidSubmit="OnValidSumit">
		<DataAnnotationsValidator></DataAnnotationsValidator>
		<ValidationSummary></ValidationSummary>
		<div class="form-group">
			<label for="name">Name</label>
			<InputText id="name" @bind-Value="category.Name" class="form-control"></InputText>
		</div>
		<div class="form-group">
			<label for="name">Description</label>
			<InputText id="name" @bind-Value="category.Description" class="form-control"></InputText>
		</div>
		<br />
		<button type="submit" class="btn btn-primary" >Save</button>
		<button type="button" class="btn btn-primary" @onclick="OnCancel" >Cancel</button>
	</EditForm>
}


@code {
	[Parameter]
	public string categoryId { get; set; }

	private Category category;

	protected override void OnInitialized()
	{
		base.OnInitialized();

	}

	protected override void OnParametersSet()
	{
		base.OnParametersSet();
		if(int.TryParse(this.categoryId, out int id))
			this.category = GetCategoryByIdUseCase.Execute(id);
	}

	private void OnValidSumit()
	{
		EditCategoryUseCase.Execute(this.category);
		navigationManager.NavigateTo("/categories");

	}

	private void OnCancel()
	{
		navigationManager.NavigateTo("/categories");
	}
}

